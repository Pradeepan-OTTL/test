name: Backend Deployment

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
  workflow_call:
    inputs:
        RELEASE_TAG:
          description: 'Optional release tag (must start with v, e.g., v1.2.3)'
          required: false
          type: string

permissions:
  contents: write

jobs:
  DevDeployment:
    name: Dev Deployment
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master' && !startsWith(github.event.pull_request.head.ref, 'hotfix')
    runs-on: test
    environment:
      name: Development
    steps:
      - name: Deploy
        run: |
            printenv
            echo DevDeployment!

  StagingDeployment:
    name: Staging Deployment
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master' && !startsWith(github.event.pull_request.head.ref, 'hotfix')
    needs: [DevDeployment]
    runs-on: test
    environment:
      name: Staging
    steps:
      - name: Deploy
        run: echo StagingDeployment!

  ProdDeployment:
    name: Production Deployment
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master' && !startsWith(github.event.pull_request.head.ref, 'hotfix')
    needs: [StagingDeployment]
    runs-on: test
    environment:
      name: Production
    steps:
      - name: Deploy
        run: |
            printenv
            echo ProdDeployment!

  CreateReleaseTag:
    name: Create Release Tag
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master' && !startsWith(github.event.pull_request.head.ref, 'hotfix')
    needs: [ProdDeployment]
    runs-on: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create or Push Tag
        env:
          RELEASE_TAG: ${{ inputs.RELEASE_TAG }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          if [[ -n "$RELEASE_TAG" ]]; then
            echo "Using user-provided tag: $RELEASE_TAG"
            if [[ ! "$RELEASE_TAG" =~ ^v ]]; then
              echo "Provided tag does not match format 'vX.Y.Z'"
              exit 1
            fi
            git tag "$RELEASE_TAG"
            git push origin "$RELEASE_TAG"
            exit 0
          fi

          echo "No RELEASE_TAG provided. Auto-generating one..."
          git fetch --tags
          LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "Latest Tag: $LATEST_TAG"

          if [[ ! "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format or no valid tag found, defaulting to v0.0.0"
            LATEST_TAG="v0.0.0"
          fi

          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          if [[ "${{ github.event.pull_request.head.ref }}" == hotfix* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          fi

          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New Tag: $NEW_TAG"

          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
