name: Backend Deployment

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
  workflow_call:

permissions:
  contents: write

jobs:
  DevDeployment:
    name: Dev Deployment
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    runs-on: test
    environment:
      name: Development
    steps:
      - name: Deploy
        run: |
            echo "PR Merged: ${{ github.event.pull_request.merged }}"
            echo "Base Ref: ${{ github.event.pull_request.base.ref }}"
            echo "Head Ref: ${{ github.event.pull_request.head.ref }}"
            PR_NUMBER=${{ github.event.pull_request.number }}
            SOURCE_BRANCH=${{ github.event.pull_request.head.ref }}
            echo "PR Number: $PR_NUMBER"
            echo "Source Branch: $SOURCE_BRANCH"
            printenv
            echo DevDeployment! 


  StagingDeployment:
    name: Staging Deployment
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    needs: [DevDeployment]
    runs-on: test
    environment:
      name: Staging
    steps:
      - name: Deploy
        run: echo StagingDeployment!

  ProdDeployment:
    name: Production Deployment
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    needs: [StagingDeployment]
    runs-on: test
    environment:
      name: Production
    steps:
      - name: Deploy
        run: echo ProdDeployment!

  CreateReleaseTag:
    name: Create Release Tag
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    needs: [ProdDeployment]
    runs-on: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Release Tag
        run: |
          # Fetch latest tags, default to v0.0.0 if no tags are found
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest Tag: $LATEST_TAG"

          # Check if the tag follows the vMAJOR.MINOR.PATCH format
          if [[ ! "$LATEST_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid tag format or no valid tag found, defaulting to v1.0.0"
            LATEST_TAG="v1.0.0"
          fi

          # Extract the version parts (MAJOR.MINOR.PATCH)
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Check if the source branch starts with "hotfix"
          if [[ "${{ github.event.pull_request.head.ref }}" == hotfix* ]]; then
            # Increment MINOR for hotfix branches, reset PATCH to 0
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            # Increment MAJOR for other branches, reset MINOR and PATCH to 0
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          fi

          # Create the new tag
          NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New Tag: $NEW_TAG"

          # Configure git and create the new tag
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG